Error:-Not saved the category Before saving the product/ Need to set ID value Manually

So after writing addProducts method completely the spring run successfully
But once i try to send a POST request from the POSTMAN i got error.

so when i tried to check in the logs, in intellij the error in 1st line was
org.hibernate.id.IdentifierGenerationException: Identifier of entity 'com.example.productserviceproject.models.Product' must be manually assigned before calling 'persist()'

Here behind the scene Save() method is calling Persist() method.
The problem is ,if we go wherever we have set ID,i.e Model Package -(BaseModel/Product /category)class we have to set ID manually.
Note:-(Based on the inheritanceMapping type ID is only declared in BaseModel class)

But here i have just declared it as
            private Long id;
i have not told Database from where to generate this ID Automatically(No Strategy).
in this case,DB expect user to provide ID manually or tell DB to generate itself.

so we need to use annotation for DB to create Auto Increment ID
    @GeneratedValue(strategy = GenerationType.AUTO)/ used in BaseModel Class


In ProductController Class
-------------------------------
Q)how to dynamically set the category id? because one who save product may not know the id of the category?
-then we need some complex logic
do in addNew Product service method we need to write the logic

@PostMapping
        public Product addNewProduct(@RequestBody Product product){
            Category category=product.getCategory();
            if(category.getId() != null){
                Category savedCategory=categoryRepository.save(category);//this will return the category that is saved
                product.setCategory(savedCategory);
            }
            return productService.addNewProduct(product);

Or say Controller will never know/ask the id of the category

        Optional<Category> categoryOptional=categoryRepository.findByName(product.getCategory().getName());
        if(categoryOptional.isEmpty()){
            Category savedCategory=categoryRepository.save(product.getCategory());
            product.setCategory(savedCategory);
        }else{
            product.setCategory(categoryOptional.get());
        }

In Category Repository we add another method
Optional<Category> findByName(String name);

Now After editing the code, we just ask the name from people and do the task
No need to ask any id/thing from the USER
But here we need Minimum 2 DB calls -
    1st to check if category exist or not
    2nd to save the category if not exist


Solution For the above Issue(one among many Ways):-
--------------------------------
*) Mapped By:- It is used to tell Hibernate that the key for the relationship is on the other side.
if mappedBy is not used, then hibernate will create a new table to store the relationship between the two tables.
if we have a product and category table, then hibernate will create a new table to store the relationship between the two tables.

EX-   But if we use mappedBy, then hibernate will not create a new table to store the relationship between the two tables.
           In Category class
            @OneToMany(mappedBy="Category")
                private List<Product> products;
           In Product class
            @ManyToOne
                private Category category;

Hey Spring this is OneToMany relation, please dont represent it again as it is already been mapped in the
Product class by an attribute named category
            @OneToMany (mappedBy = "category")
                private List<Product> products;
the list of products of category class and category of product class are mapped by each other
or showcase same relation

@ManyToOne- Doesn't support MappedBy. so MappedBy is marked to OneToMany in Category class
            @OneToMany (mappedBy = "category")
                private List<Product> products;

Special Case-
    Cardinality between the product and category?
               Many to one
            Product : Category
                m   :   1
Lets make Both Product and Category as ManyToMany Relation
            In Product Class
            @ManyToMany
            private List<Category> categories;

            In Category Class
            @ManyToMany(mappedBy = "category")
            private List<Product> products;
we need to use MappedBy , for addNewProduct method just return null to check working of the code
and in Fakeserviceclass add the logic to save the product and category- In convertFakeStoreProductToProduct method a
add below lines
            Category category=new Category();
            category.setName(fakeStoreProduct.getCategory());
            product.setCategory(new ArrayList<>(Arrays.asList(category)));
            product.getCategory().add(category);

Now run the application and check the logs, you will see the category is saved first and then the product is saved
Also check the DB, you will see the Mapping table is created and the product and category are saved in the respective tables.


*) Cascade Type and Its Uses:-
Reference - https://www.baeldung.com/jpa-cascade-types
    1)CascadeType.PERSIST
    2)CascadeType.MERGE
    3)CascadeType.REMOVE
    4)CascadeType.REFRESH
    5)CascadeType.DETACH
    6)CascadeType.ALL

When we are saving the product, we are also saving the category.
So we need to cascade the operation from product to category.
Cascade is used
when product and category are interdependent or if something happens to the product,then do the similar thing to category.

Ex- if someone deletes/update/create the product. then we use Cascade to do the same to category..
1)if someone deletes the product-iphone 14, Than Category-phone will also be deleted ans all phones will be deleted.
           //@ManyToOne(cascade = {CascadeType.ALL})
               private Category category;
Here Cascade.ALL covers all action taken to a product, will be taken to category also.

But here we are not intended to delete the category, so we don't need to use CascadeType.ALL.
We just need to use CascadeType.PERSIST
            @ManyToOne(cascade = {CascadeType.PERSIST})
            private Category category;
Persist-saving data somewhere reliable where it will still be there after your application
terminates, or in case of a system crash or power shutdown

Using Persist Means if someone saves the product, then save the category also.if we want to delete a category,when product is deleted.
if want than we can also write CascadeType.REMOVE
        Ex- @ManyToOne(cascade = {CascadeType.PERSIST,CascadeType.REMOVE})
            private Category category;

Note:-
    If we do vice-versa- Instead of cascading in Product class if we cascade in Category class
        @OneToMany(mappedBy="Category", cascade = {CascadeType.PERSIST})
            private List<Product> products;
Then it will be wrong, because if someone adds/deletes a product than Category will be added/deleted.

Imagine if we use same in Category Class,this is if someone adds/deletes a category than Product willbe added/deleted.
it will be wrong, yes we can remove the product if category is deleted but we can't add the product if category is added.
in this case we need to use CascadeType.REMOVE only(Worst scenario).
        @OneToMany(mappedBy="Category", cascade = {CascadeType.REMOVE})